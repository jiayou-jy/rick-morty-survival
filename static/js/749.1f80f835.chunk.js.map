{"version":3,"file":"static/js/749.1f80f835.chunk.js","mappings":"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","sources":["Details.tsx","Chart.tsx","SearchParams.tsx"],"sourcesContent":["import { FunctionComponent, useState } from \"react\";\nimport {Root} from \"./Chart\";\n\nconst Details: FunctionComponent<{datum: Root}> = (datum) => {\n    if (!datum) return null;\n    const { name, status, species, gender, image, location, episode } = datum.datum;\n\n    return (\n      <div className=\"details\">\n          <h2>{name}</h2>\n          <div className=\"image-container\">\n            {image? (<img src={image} alt={name}/>) : null}\n          </div>\n          <h3>\n            Status:{status}\n          </h3>\n          <h3>\n            Species: {species}\n          </h3>\n          <h3>\n            Gender: {gender}\n          </h3>\n          <h3>\n            Location: {location?.name}\n          </h3>\n          <h3>\n            Episodes: {episode?.length}\n          </h3>\n      </div>\n    );\n};\n\nexport default Details;\n","import { FunctionComponent, useState, lazy } from \"react\";\nimport { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { Character, Location } from \"./APIResponsesTypes\";\nimport { HierarchyCircularNode } from \"d3\";\nimport Details from \"./Details\";\n\nexport interface Root{\n    name: string;\n    children: (Root | Character)[];\n    id?: string;\n    status?: string;\n    species?: string;\n    gender?: string;\n    image?: string | null;\n    location?: Location;\n    episode?: string[];\n    data?: Character;\n}\n\nexport type Node = HierarchyCircularNode<Root>;\n\nconst Chart: FunctionComponent<{ data: Character[], loading: boolean, category: string}> = ({data, loading, category}) => {\n    const svgRef = useRef(null);\n    const [width, setWidth] = useState(500);\n    const [height, setHeight] = useState(500);\n    const [nodeData, setNodeData] = useState<Node[]>([]);\n    const [datum, setDatum] = useState<Root | undefined>();\n    const [showDetail, setShowDetail] = useState(false);\n    \n    useEffect( draw, [data, width, height]);\n\n    useEffect(bubbleClickHandler,)\n\n    useEffect(() => {\n        window.addEventListener(\"resize\", sizeWindow);\n        return () => window.removeEventListener(\"resize\", sizeWindow);\n    }, []);\n\n    function sizeWindow(){\n        const newWidth = window.innerWidth - 250;\n        const newHeight = window.innerHeight - 100;\n        setWidth(newWidth);\n        setHeight(newHeight);\n    }\n\n    function draw(){\n        if (!data || data.length === 0 || !svgRef.current) return;\n        sizeWindow();\n        const svg = d3.select(svgRef.current);\n\n        const grouped: Root[] = Array.from(d3.group(data, d => d.species), ([name, children]) => ({name, children}));\n        const root: Root = ({\n            name: \"Root\",\n            children: grouped\n            });\n        const nodes = calculateNodes(root, width, height);\n        setNodeData(nodes);\n        \n        const groupName = grouped.map(d => d.name);\n            \n        const patterns = svg.select(\"defs\")\n            .selectAll(\"pattern\")\n            .data(nodes.filter(d => d.data.image))\n            .attr(\"id\", d => String(d.data.id))\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1)\n            .attr(\"height\", 1);\n        \n        patterns.select(\"image\")\n            .attr(\"href\", d => String(d.data.image))\n            .attr(\"x\", 0)\n            .attr(\"y\", 0)\n            .attr(\"width\", d => d.r * 2)\n            .attr(\"height\", d => d.r * 2);\n\n        const bubbles = d3.select(\".canvas\").selectAll(\"circle\")\n            .data(nodes)\n            .join(\"circle\")\n            .attr(\"class\", \"bubble\")\n            // .attr(\"r\", d => d.r)\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y)\n            .attr(\"fill\", d => (d.data.image) ? \"url(#\" + String(d.data.id) + \")\" : \"#fff\")\n            .attr(\"fill-opacity\", d => (d.data.status === \"Dead\")? \"0.3\" : \"1\")\n            .attr(\"stroke\", d => getColor(String(d.data.species), groupName));\n        \n        bubbles.transition()\n            .delay((d, i) => Math.random() * 500)\n            .duration(750)\n            .attrTween(\"r\", d => tweenR(d.r));\n    }\n\n    function getColor(item: string, domain: string[]) : string {\n        const color = d3.scaleOrdinal()\n        .domain(domain)\n        .range(d3.schemeCategory10);\n\n        return String(color(item));\n    }\n\n    function tweenR(r: number){\n       const i = d3.interpolate(0, r);\n        return (t: number) => String(i(t));\n    }\n\n    function calculateNodes(\n            root: Root,\n            width: number,\n            height: number\n        ) : Node[] {\n            const rootNode = d3.hierarchy(root)\n                .sum(d => 1);\n\n            const pack = d3.pack<Root>()\n                .size([width, height])\n                .padding(4);\n            return pack(rootNode).leaves();\n        }\n\n    function bubbleClickHandler() {\n        d3.select(\".canvas\").selectAll(\"circle\")\n        .on(\"click\", (e, d:any) => {\n            setDatum(d.data); \n            setShowDetail(!showDetail);\n            d3.select(e.target)\n            .style(\"stroke-width\", () => showDetail? \"2px\" : \"6px\");\n        })\n        \n    }\n    \n    if (loading) {\n        return <h2>scanning...</h2>;\n    } else {\n        return (\n        <div className=\"chart-container\">\n            <svg className=\"chart\" width={width} height={height} ref={svgRef}>\n                <defs>\n                    {data.map(d => (<pattern key={d.id} className=\"bg_img\">\n                        <image />\n                    </pattern>))}\n                </defs>\n                <g className=\"canvas\">\n                    {/* {nodeData.map(d => (<circle key={d.data.id} onClick={(e) => bubbleClickHandler(e, d)} />))} */}\n                </g>\n            </svg>\n            {\n                (datum && showDetail) ? (<Details datum={datum} />) : null\n            }\n            \n        </div>\n    )\n    }\n    \n};\n\nexport default Chart;","import { FunctionComponent, useState, useEffect } from \"react\";\nimport { useErrorHandler } from \"react-error-boundary\";\nimport Chart from \"./Chart\";\nimport { APIResponse, Character, Status } from \"./APIResponsesTypes\";\n\ninterface Cache {\n  [key: string]: Character[];\n}\n\nconst localCache = {} as Cache;\nconst STATUS: Status[] = [\"any\", \"alive\", \"dead\", \"unknown\"];\n\nconst SearchParams: FunctionComponent = () => {\n  const [name, setName] = useState(\"all\");\n  const [status, setStatus] = useState(\"alive\");\n  const [characters, setCharacters] = useState<Character[]>([]);\n  const [category, setCategory] = useState(\"species\");\n  const [loading, setLoading] = useState(true);\n  const handleError = useErrorHandler();\n  const cacheKey = `${name}_${status}`;\n\n  useEffect(() => {\n    if (localCache[cacheKey]) {\n      setCharacters(localCache[cacheKey]);\n    } else {\n      requestCharacters();\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  async function requestCharacters() {\n    let url = \"https://rickandmortyapi.com/api/character/\";\n    let results = [] as Character[];\n    let lastResInfo;\n    if (name !== \"all\") {\n      url += `?name=${name}`;\n    }\n\n    if (status !== \"any\") {\n      url += (name === \"all\")? `?status=${status}` : `&status=${status}`;\n    }\n    do {\n      const res = await fetch(url);\n      if (res.ok) {\n        const json = (await res.json()) as APIResponse;\n        results = results.concat(json.results);\n        lastResInfo = json.info;\n        url = lastResInfo.next;\n      } else {\n        return Promise.reject(res)\n          .catch(handleError);\n      }\n      \n    } while (lastResInfo.next);\n    \n    localCache[cacheKey] = results || [];\n    setCharacters(results);\n    setLoading(false);\n  }\n\n  return (\n    <div className=\"search-params\">\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          setLoading(true);\n          requestCharacters();\n        }}\n      >\n        <label htmlFor=\"name\">\n          Name\n          <input\n            id=\"name\"\n            value={name}\n            onChange={(e) => setName(e.target.value.toLocaleLowerCase())}\n            placeholder=\"name\"\n          />\n        </label>\n        <label htmlFor=\"status\">\n          Status\n          <select\n            id=\"status\"\n            value={status}\n            onChange={(e) => setStatus(e.target.value)}\n            onBlur={(e) => setStatus(e.target.value)}\n          >\n            {STATUS.map((status) => (\n              <option \n              key={status} \n              value={status}\n              onChange={(e) => setStatus(status)}\n              onBlur={(e) => setStatus(status)}\n              >\n                {status}\n              </option>\n            ))}\n          </select>\n        </label>\n        <button>Get Schwifty!</button>\n      </form>\n      {/* <div className=\"categories\">\n        {CATEGORY.map((category) => (\n          <button \n            key={category} \n            value={category}\n            onClick = {(e) => setCategory(category)}>\n              {category}\n            </button>\n          ))}\n      </div> */}\n      <Chart data={characters} loading={loading} category={category}/>\n    </div>\n  );\n};\n\nexport default SearchParams;\n"],"names":["datum","name","status","species","gender","image","location","episode","className","src","alt","length","data","loading","svgRef","category","useRef","useState","width","setWidth","height","setHeight","setNodeData","setDatum","showDetail","setShowDetail","sizeWindow","newWidth","window","innerWidth","newHeight","innerHeight","useEffect","current","svg","d3","grouped","Array","from","d","children","nodes","root","rootNode","sum","size","padding","pack","leaves","calculateNodes","groupName","map","select","selectAll","filter","attr","String","id","r","join","x","y","item","domain","color","range","getColor","transition","delay","i","Math","random","duration","attrTween","t","tweenR","on","e","target","style","addEventListener","removeEventListener","ref","localCache","STATUS","setName","setStatus","characters","setCharacters","setLoading","handleError","useErrorHandler","cacheKey","requestCharacters","url","results","fetch","res","ok","json","concat","lastResInfo","info","next","Promise","reject","catch","onSubmit","preventDefault","htmlFor","value","onChange","toLocaleLowerCase","placeholder","onBlur"],"sourceRoot":""}